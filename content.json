{"meta":{"title":"珍品菲尔的博客","subtitle":"Lifetime Learner","description":"努力努力努力努力","author":"cuanHaoQi","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"shell","slug":"shell","date":"2021-05-11T14:24:50.000Z","updated":"2021-05-14T15:30:46.128Z","comments":true,"path":"2021/05/11/shell/","link":"","permalink":"http://example.com/2021/05/11/shell/","excerpt":"Shell概述","text":"Shell概述 Shell解析器 Linux提供的Shell解析器有： 1234567[root@hadoop100 ~]# cat /etc/shells /bin/sh/bin/bash/usr/bin/sh/usr/bin/bash/bin/tcsh/bin/csh bash和sh的关系 12345[root@hadoop100 bin]# ll | grep bash-rwxr-xr-x. 1 root root 964536 Apr 1 2020 bashlrwxrwxrwx. 1 root root 10 Apr 29 17:16 bashbug -&gt; bashbug-64-rwxr-xr-x. 1 root root 6964 Apr 1 2020 bashbug-64lrwxrwxrwx. 1 root root 4 Apr 29 17:16 sh -&gt; bash Centos默认的解析器是bash 12[root@hadoop100 bin]# echo $SHELL/bin/bash Shell脚本入门 脚本格式 脚本以#!/bin/bash开头（指定解析器） 第一个Shell脚本：helloworld （1）需求：创建一个Shell脚本，输出helloworld （2）案例实操： 123456[root@hadoop100 ~]$ touch helloworld.sh[root@hadoop100 ~]$ vi helloworld.sh在helloworld.sh中输入如下内容#!&#x2F;bin&#x2F;bashecho &quot;helloworld&quot; （3）脚本的常用执行方式 第一种：采用bash或sh+脚本的相对路径或绝对路径（不用赋予脚本+x权限） sh+脚本的相对路径： 12[root@hadoop100 ~]$ sh helloworld.sh Helloworld sh+脚本的绝对路径： 12[root@hadoop100 ~]$ sh &#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;helloworld.sh helloworld bash+脚本的相对路径 bash+脚本的绝对路径 第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限+x） 首先要赋予helloworld.sh 脚本的+x权限 1[root@hadoop100 ~]$ chmod +x helloworld.sh 执行脚本 相对路径： 12[root@hadoop100 ~]$ .&#x2F;helloworld.sh Helloworld 绝对路径： 12[root@hadoop100 ~]$ &#x2F;home&#x2F;atguigu&#x2F;datas&#x2F;helloworld.sh Helloworld 注意：第一种执行方法，本质是bash解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。 第二个Shell脚本：多命令处理 （1）需求： 在/root目录下创建一个banzhang.txt,在banzhang.txt文件中增加“I love cls”。 （2）案例实操： 123456789[root@hadoop100 ~]$ touch batch.sh[root@hadoop100 ~]$ vi batch.sh在batch.sh中输入如下内容#!&#x2F;bin&#x2F;bashcd &#x2F;roottouch cls.txtecho &quot;I love cls&quot; &gt;&gt; cls.txt Shell中的变量 系统变量 常用系统变量 $HOME、​$PWD、$SHELL、​$USER等 案例实操 （1）查看系统变量的值 12[root@hadoop100 ~]# echo $HOME&#x2F;root 自定义变量 基本语法 （1）定义变量：变量=值 （2）撤销变量：unset 变量 （3）声明静态变量：readonly变量，注意：不能unset 变量定义规则 （1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。 （2）等号两侧不能有空格 （3）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。 （4）变量的值如果有空格，需要使用双引号或单引号括起来 案例实操 （1）定义变量A 123[root@hadoop100 ~]# A&#x3D;5[root@hadoop100 ~]# echo $A5 （2）给变量A重新赋值 123[root@hadoop100 ~]# A&#x3D;8[root@hadoop100 ~]# echo $A8 （3）撤销变量A 123[root@hadoop100 ~]# unset A[root@hadoop100 ~]# echo $A （4）声明静态的变量B=2，不能unset 12345[root@hadoop100 ~]# readonly B&#x3D;2[root@hadoop100 ~]# echo $B2[root@hadoop100 ~]# B&#x3D;9-bash: B: readonly variable （5）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算 12[root@hadoop100 ~]# echo $C1+2 （6）变量的值如果有空格，需要使用双引号或单引号括起来 12345[root@hadoop100 ~]# D&#x3D;hello worldbash: world: command not found...[root@hadoop100 ~]# D&#x3D;&quot;hello world&quot;[root@hadoop100 ~]# echo $Dhello world （7）可把变量提升为全局环境变量，可供其他Shell程序使用 export 变量名 1234567891011[root@hadoop100 ~]# vim hello.sh在hello.sh文件中增加echo $B#!&#x2F;bin&#x2F;bashecho &quot;hello world!&quot;echo $B[root@hadoop100 ~]# .&#x2F;hello.sh hello world! 发现并没有打印输出变量B的值。 1234[root@hadoop100 ~]# export B[root@hadoop100 ~]# .&#x2F;hello.sh hello world!2 特殊变量：$n 基本语法 $n （功能描述：n为数字，​$0代表该脚本名称，​$1-​$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，${10}） 案例实操 （1）输出该脚本文件名称、输入参数1和输入参数2 的值 1234567[root@hadoop100 ~]# vim parameter.sh#!&#x2F;bin&#x2F;bashecho &quot;$0 $1 $2&quot;[root@hadoop100 ~]# bash parameter.sh aa bbparameter.sh aa bb 特殊变量：$ 基本语法 $# （功能描述：获取所有输入参数个数，常用于循环）。 案例实操 （1）获取输入参数的个数 123456789[root@hadoop100 ~]# vim parameter.sh#!&#x2F;bin&#x2F;bashecho &quot;$0 $1 $2&quot;echo $#root@hadoop100 ~]# bash parameter.sh aa bbparameter.sh aa bb2 特殊变量：$*、$@ 基本语法 $* （功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体） $@ （功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待） 案例实操 （1）打印输入的所有参数 12345678910111213[root@hadoop100 ~]# vim parameter.sh#!&#x2F;bin&#x2F;bashecho &quot;$0 $1 $2&quot;echo $#echo $*echo $@[root@hadoop100 ~]# bash parameter.sh aa bb ccparameter.sh aa bb3aa bb ccaa bb cc 特殊变量：$？ 基本语法 $？ （功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。） 案例实操 （1）判断helloworld.sh脚本是否正确执行 12345[root@hadoop100 ~]# bash hello.sh hello world!2[root@hadoop100 ~]# echo $?0 运算符 基本语法 （1）“$((运算式))”或“$[运算式]” （2）expr + , - , *, /, % 加，减，乘，除，取余 ​ 注意：expr运算符间要有空格 案例实操： （1）计算3+2的值 123456[root@hadoop100 ~]# echo $[3 + 2]5[root@hadoop100 ~]# echo $[ 3 +2]5[root@hadoop100 ~]# expr 2 + 35 （2）计算（2 + 3）* 4的值 1234567# expr一步完成计算[root@hadoop100 ~]# expr &#96;expr 2 + 3&#96; \\* 420# 采用$[运算式]方式[root@hadoop100 ~]# echo $(((2 + 3) * 4))20 条件判断 条件判断 [ condition ] （注意condition前后要有空格） 注意：条件非空即为true，[ condition ]返回true，[] 返回false。 常用判断条件 （1）两个整数之间比较 ​ = 字符串比较 ​ -lt 小于（less than） -le 小于等于（less equal） ​ -eq 等于（equal） -gt 大于（greater than） ​ -ge 大于等于（greater equal） -ne 不等于（Not equal） （2）按照文件权限进行判断 ​ -r 有读的权限（read） -w 有写的权限（write） ​ -x 有执行的权限（execute） （3）按照文件类型进行判断 ​ -f 文件存在并且是一个常规的文件（file） ​ -e 文件存在（existence） -d 文件存在并是一个目录（directory） 案例实操 （1）23是否大于等于22 123[root@hadoop100 ~]# [ 22 -lt 23 ][root@hadoop100 ~]# echo $?0 （2）hello.sh是否具有写权限 123[root@hadoop100 ~]# [ -w hello.sh ][root@hadoop100 ~]# echo $?0 （3）/root/hello.sh目录中的文件是否存在 123456[root@hadoop100 ~]# [ -e &#x2F;root&#x2F;hello.sh ][root@hadoop100 ~]# echo $?0[root@hadoop100 ~]# [ -e &#x2F;root&#x2F;hello1.sh ][root@hadoop100 ~]# echo $?1 （4）多条件判断（&amp;&amp; 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令） 1234[root@hadoop100 ~]# [ -e &#x2F;root&#x2F;hello.sh ] &amp;&amp; echo &quot;hello.sh存在&quot;hello.sh存在[root@hadoop100 ~]# [ -e &#x2F;root&#x2F;a.sh ] || echo &quot;a.sh不存在&quot;a.sh不存在 流程控制（重点） if 判断 基本语法 1234567891011121314if [ 条件判断式 ]then 程序 fi 或者 if [ 条件判断式 ] then 程序 elif [ 条件判断式 ] then 程序else 程序fi 注意事项： （1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格 （2）if后要有空格 案例实操 （1）输入一个数字，如果是1，则输出aaa，如果是2，则输出ccc，如果是其它，什么也不输出。 123456789101112131415[root@hadoop100 ~]# vim if.sh#!&#x2F;bash&#x2F;binif [ $1 &#x3D; 1 ] then echo &quot;aaa&quot;elif [ $1 &#x3D; 2 ] then echo &quot;bbb&quot;fi[root@hadoop100 ~]# bash if.sh 1aaa[root@hadoop100 ~]# bash if.sh 2bbb case 语句 基本语法 123456789101112case $变量名 in &quot;值1&quot;） 如果变量的值等于值1，则执行程序1 ;; &quot;值2&quot;） 如果变量的值等于值2，则执行程序2 ;; …省略其他分支… *） 如果变量的值都不是以上的值，则执行此程序 ;; esac 注意事项： （1) case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。 （2) 双分号“;;”表示命令序列结束，相当于java中的break。 （3) 最后的“*）”表示默认模式，相当于java中的default，*不可以加双引号。 案例实操 （1）输入一个数字，如果是1，则输出aaa，如果是2，则输出bbb，如果是其它，输出ccc。 123456789101112131415161718192021[root@hadoop100 ~]# vim case.sh#!&#x2F;bin&#x2F;bashcase $1 in&quot;1&quot;) echo aaa;;&quot;2&quot;) echo bbb;;*) echo ccc;;esac[root@hadoop100 ~]# bash case.sh ccc[root@hadoop100 ~]# bash case.sh 1aaa[root@hadoop100 ~]# bash case.sh 12ccc for 循环 基本语法1 1234for ((初始值;循环控制条件;变量变化)) do 程序 done 案例实操 （1）从1加到100 123456789101112[root@hadoop100 ~]# vim for.sh#!&#x2F;bin&#x2F;bashsum&#x3D;0for((i&#x3D;1;i&lt;&#x3D;$1;i++))do sum&#x3D;$[$sum + $i]doneecho $sum[root@hadoop100 ~]# bash for.sh 1005050 基本语法2 1234for 变量 in 值1 值2 值3… do 程序 done 案例实操 （1）打印所有输入参数 123456789101112131415[root@hadoop100 ~]# vim for2.sh #!&#x2F;bash&#x2F;binfor i in $* do echo $i done[root@hadoop100 ~]# bash for2.sh 1 2 3 4 5 6123456 （2）比较$*和$@区别 ​ （a）$*和​$@都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …​$n的形式输出所有参数。 ​ （b）当它们被双引号“”包含时，“$*”会将所有的参数作为一个整体，以“​$1 ​$2 …$n”的形式输出所有参数；“$@”会将各个参数分开，以“​$1” “​$2”…”​$n”的形式输出所有参数。 12345678910111213141516171819202122232425262728293031323334353637[root@hadoop100 ~]# vim for.sh #!&#x2F;bin&#x2F;bashfor i in $* do echo &#39;$*:&#39;$i doneecho &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;for i in $@ do echo &#39;$@:&#39;$i doneecho &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;for i in &quot;$*&quot; do echo &#39;&quot;$*&quot;:&#39;$i doneecho &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;for i in &quot;$@&quot; do echo &#39;&quot;$@&quot;:&#39;$i done[root@hadoop100 ~]# bash for.sh 1 2 3$*:1$*:2$*:3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;$@:1$@:2$@:3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;$*&quot;:1 2 3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;$@&quot;:1&quot;$@&quot;:2&quot;$@&quot;:3 while 循环 基本语法 1234while [ 条件判断式 ] do 程序 done 案例实操 （1）从1加到100 1234567891011121314[root@hadoop100 ~]# vim while.sh#!/bash/bini=1sum=0while [ $i -le 100 ] do sum=$(($sum + $i)) i=$[$i+1] doneecho $sum[root@hadoop100 ~]# bash while.sh 5050 注意事项： while后面需要有空格 read读取控制台输入 基本语法 ​ read(选项)(参数) ​ 选项： ​ -p：指定读取值时的提示符； ​ -t：指定读取值时等待的时间（秒）。 ​ 参数 变量：指定读取值的变量名 案例实操 （1）提示7秒内，读取控制台输入的名称 1234[root@hadoop100 ~]# read -t 5 -p &quot;请输入用户名:&quot; name请输入用户名:zhangsan[root@hadoop100 ~]# echo $namezhangsan 函数 系统函数 basename基本语法 basename [string / pathname] [suffix] （功能描述：basename命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。 选项： suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉。 案例实操 （1）截取该/root/hello.sh路径的文件名称 1234[root@hadoop100 ~]# basename &#x2F;root&#x2F;hello.sh hello.sh[root@hadoop100 ~]# basename &#x2F;root&#x2F;hello.sh .shhello dirname基本语法 dirname 文件绝对路径 （功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）） 案例实操 （1）获取hello.sh文件的路径 12[root@hadoop100 ~]# dirname &#x2F;root&#x2F;hello.sh &#x2F;root 自定义函数 基本语法 123456[ function ] funname[()]&#123; Action; [return int;]&#125;funname 经验技巧 （1）必须在调用函数地方之前，先声明函数，shell脚本是逐行运行。不会像其它语言一样先编译。 （2）函数返回值，只能通过$?系统变量获得，可以显示加return返回，如果不加，将以最后一条命令运行结果，作为返回值。return后跟数值n(0-255) 案例实操 （1）计算两个输入参数的和 123456789101112131415161718[root@hadoop100 ~]# vim fun.sh#!&#x2F;bin&#x2F;bashfunction sum()&#123; s&#x3D;0 s&#x3D;$[ $1 + $2 ] echo &quot;$s&quot;&#125;read -p &quot;Please input the number1: &quot; n1;read -p &quot;Please input the number2: &quot; n2;sum $n1 $n2;[root@hadoop100 ~]# bash fun.sh Please input the number1: 5Please input the number2: 611 Shell工具（重点） cut cut的工作就是“剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。 基本用法 cut [选项参数] filename 说明：默认分隔符是制表符 选项参数说明 选项参数 功能 -f 列号，提取第几列 -d 分隔符，按照指定分隔符分割列 -c 指定具体的字符 案例实操 （0）数据准备 1234567[root@hadoop100 ~]# head -n 5 &#x2F;etc&#x2F;passwd &gt; p.txt [root@hadoop100 ~]# cat p.txt root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin （1）切割p.txt第一个字符 123456[root@hadoop100 ~]# cut -c 1 p.txt rbdal （2）切割p.txt第一、三列 123456[root@hadoop100 ~]# cut -d : -f 1,3 p.txt root:0bin:1daemon:2adm:3lp:4 （3）查找root行 再切割 12[root@hadoop100 ~]# cat p.txt | grep root | cut -d : -f 2-3 x:0 sed sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”，接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。 基本用法 sed [选项参数] ‘command’ filename 选项参数说明 选项参数 功能 -e 直接在指令列模式上进行sed的动作编辑。 -i 直接编辑文件 命令功能描述 命令 功能描述 a 新增，a的后面可以接字串，在下一行出现 d 删除 s 查找并替换 案例实操 （1）将“hello world!”这个单词插入到p.txt第二行下，打印。 12345678910111213[root@hadoop100 ~]# sed &#39;2ahello world!&#39; p.txtroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologinhello world!daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin[root@hadoop100 ~]# cat p.txt root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin 注意：文件并没有改变 （2）删除p.txt文件所有包含root的行 12345[root@hadoop100 ~]# sed &#39;&#x2F;root&#x2F;d&#39; p.txt bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin （3）将p.txt文件中root替换为toor 123456[root@hadoop100 ~]# sed &#39;s&#x2F;root&#x2F;toor&#x2F;g&#39; p.txt toor:x:0:0:toor:&#x2F;toor:&#x2F;bin&#x2F;bashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologi 注意：‘g’表示global，全部替换 （4）将p.txt文件中的第二行删除并将root替换为xxxx 12345[root@hadoop100 ~]# sed -e &#39;2d&#39; -e &#39;s&#x2F;root&#x2F;xxxx&#x2F;g&#39; p.txt xxxx:x:0:0:xxxx:&#x2F;xxxx:&#x2F;bin&#x2F;bashdaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin awk 一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。 基本用法 awk [选项参数] ‘pattern1{action1} pattern2{action2}...’ filename pattern：表示AWK在数据中查找的内容，就是匹配模式 action：在找到匹配内容时所执行的一系列命令 选项参数说明 选项参数 功能 -F 指定输入文件折分隔符 -v 赋值一个用户定义变量 案例实操 （1）搜索p.txt文件以root关键字开头的所有行，并输出该行的第7列。 12[root@hadoop100 ~]# awk -F : &#39;&#x2F;^root&#x2F;&#123;print $7&#125;&#39; p.txt &#x2F;bin&#x2F;bash （2）搜索p.txt文件以root关键字开头的所有行，并输出该行的第1列和第7列，中间以“，”号分割。 12[root@hadoop100 ~]# awk -F: &#39;&#x2F;^root&#x2F;&#123;print $1&quot;,&quot;$7&#125;&#39; p.txt root,&#x2F;bin&#x2F;bash 注意：只有匹配了pattern的行才会执行action （3）只显示p.txt的第一列和第七列，以逗号分割，且在所有行前面添加\"the begin of the world\"在最后一行添加\"the end of the world\"。 12345678[root@hadoop100 ~]# awk -F : &#39;BEGIN&#123;print &quot;the begin of the world&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;the end of the world&quot;&#125;&#39; p.txt the begin of the worldroot,&#x2F;bin&#x2F;bashbin,&#x2F;sbin&#x2F;nologindaemon,&#x2F;sbin&#x2F;nologinadm,&#x2F;sbin&#x2F;nologinlp,&#x2F;sbin&#x2F;nologinthe end of the world 注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。 （4）将p.txt文件中的用户id增加数值10并输出 123456[root@hadoop100 ~]# awk -F : -v i&#x3D;10 &#39;&#123;print $3+i&#125;&#39; p.txt 1011121314 awk的内置变量 变量 说明 FILENAME 文件名 NR 已读的记录数 NF 浏览记录的域的个数（切割后，列的个数） 案例实操 （1）统计passwd文件名，每行的行号，每行的列数 123456[root@hadoop100 ~]# awk -F : &#39;&#123;print &quot;filename:&quot; FILENAME &quot;, linenumber:&quot; NR &quot;, columns:&quot; NF&#125;&#39; p.txt filename:p.txt, linenumber:1, columns:7filename:p.txt, linenumber:2, columns:7filename:p.txt, linenumber:3, columns:7filename:p.txt, linenumber:4, columns:7filename:p.txt, linenumber:5, columns:7 （2）查询p.txt中空行所在的行号 1[root@hadoop100 ~]# awk &#39;&#x2F;^$&#x2F;&#123;print NR&#125;&#39; p.txt sort sort命令是在Linux里非常有用，它将文件进行排序，并将排序结果标准输出。 基本语法 sort(选项)(参数) 选项 说明 -n 依照数值的大小排序 -r 以相反的顺序来排序 -t 设置排序时所用的分隔字符 -k 指定需要排序的列 参数：指定待排序的文件列表 案例实操 （1）按照“：”分割后的第三列倒序排序。 123456[root@hadoop100 ~]# sort -t : -nrk 3 p.txt lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologinroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bash","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"}]},{"title":"linux下mysql安装","slug":"linux下mysql安装","date":"2021-05-10T05:08:04.000Z","updated":"2021-05-18T14:33:37.481Z","comments":true,"path":"2021/05/10/linux下mysql安装/","link":"","permalink":"http://example.com/2021/05/10/linux%E4%B8%8Bmysql%E5%AE%89%E8%A3%85/","excerpt":"检查当前系统是否安装过Mysql CentOS 6命令：rpm -qa | grep mysql 默认Linux在安装的时候，自带了mysql相关的组件。 先卸载系统自带的mysql，执行卸载命令 rpm -e --nodeps mysql-libs CentOS 7命令：rpm -qa | grep mariadb 不检查依赖卸载 rpm -e --nodeps mysql-libs 检查/tmp目录的权限是否是满的","text":"检查当前系统是否安装过Mysql CentOS 6命令：rpm -qa | grep mysql 默认Linux在安装的时候，自带了mysql相关的组件。 先卸载系统自带的mysql，执行卸载命令 rpm -e --nodeps mysql-libs CentOS 7命令：rpm -qa | grep mariadb 不检查依赖卸载 rpm -e --nodeps mysql-libs 检查/tmp目录的权限是否是满的 Mysql的安装 安装的版本是mysql 5.7 通过Xft文件传输工具将rpm安装包传输到opt目录下 执行rpm安装，必须按照下面的顺序安装 1234[root@hadoop100 ~]# rpm -ivh mysql-community-common-5.7.16-1.el7.x86_64.rpm[root@hadoop100 ~]# rpm -ivh mysql-community-libs-5.7.16-1.el7.x86_64.rpm[root@hadoop100 ~]# rpm -ivh mysql-community-client-5.7.16-1.el7.x86_64.rpm[root@hadoop100 ~]# rpm -ivh mysql-community-server-5.7.16-1.el7.x86_64.rpm 查看是否安装成功：mysqladmin --version 或者也可以通过rpm命令来查看 rpm -qa | grep mysql mysql服务的初始化 为了保证数据库目录为与文件的所有者为 mysql 登录用户，如果你是以 root 身份运行 mysql 服务，需要执行下面的命令初始化 mysqld --initialize --user=mysql 另外 --initialize 选项默认以“安全”模式来初始化，则会为 root 用户生成一个密码并将该密码标记为过期，登录后你需要设置一个新的密码 查看密码：cat /var/log/mysqld.log root@localhost: 后面就是初始化的密码 启动MySQL的服务 1[root@hadoop100 ~]# systemctl start mysqld 更新密码 首次登陆通过 mysql -uroot -p进行登录，在Enter password：录入初始化密码 因为初始化密码默认是过期的，所以查看数据库会报错 修改密码： 1ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;你的密码&#39;; 但新密码太简单会报错，设置完密码就可以用新密码登录，正常使用数据库了 Mysql服务 Mysql服务自启状态 查看是否是开机自启：systemctl is-enabled mysqld (默认是开机自启的) 查看启动状态：systemctl status mysqld 启动之后，查看进程：ps -ef | grep mysql Mysql的安装位置 参数 路径 解释 备注 --datadir /var/lib/mysql/ mysql数据库文件的存放路径 --basedir /usr/bin 相关命令目录 mysqladmin mysqldump等命令 --plugin-dir /usr/lib64/mysql/plugin mysql插件存放路径 --log-error /var/lib/mysql/jack.atguigu.err mysql错误日志路径 --pid-file /var/lib/mysql/jack.atguigu.pid 进程pid文件 --socket /var/lib/mysql/mysql.sock 本地连接时用的unix套接字文件 /usr/share/mysql 配置文件目录 mysql脚本及配置文件 /etc/init.d/mysql 服务启停相关脚本 Mysql服务的自启动 1[root@hadoop100 ~]# systemctl enable mysqld 修改字符集 常用命令 SQL语句 描述 备注 show databases 列出所有数据库 create database 库名 创建一个数据库 create database 库名 character set utf8 创建数据库，顺便执行字符集为utf-8 show create database 库名 查看数据库的字符集 show variables like '%char%' 查询所有跟字符集相关的信息 set [字符集属性]=utf8 设置相应的属性为utf8 只是临时修改，当前有效。服务重启后，失效。 alter database 库名character set 'utf8' 修改数据库的字符集 alter table 表名convert to character set 'utf8' 修改表的字符集 实验SQL CREATE database mydb; CREATE table mytable(id int,name varchar(30)); insert into mytable(id,name) values (1,'jack'); insert into mytable(id,name) values (2,'张三') 直接插入中文数据报错原因 如果在建库建表的时候，没有明确指定字符集，则采用默认的字符集latin1,其中是不包含中文字符的。查看默认的编码字符集： 1234567891011121314mysql&gt; show variables like &#39;%char%&#39;;+--------------------------+----------------------------+| Variable_name | Value |+--------------------------+----------------------------+| character_set_client | utf8 || character_set_connection | utf8 || character_set_database | utf8 || character_set_filesystem | binary || character_set_results | utf8 || character_set_server | utf8 || character_set_system | utf8 || character_sets_dir | &#x2F;usr&#x2F;share&#x2F;mysql&#x2F;charsets&#x2F; |+--------------------------+----------------------------+8 rows in set (0.01 sec) 永久修改 修改配置文件： vim /etc/my.cnf 在mysqld节点下最后加上中文字符集配置 character_set_server=utf8 重新启动mysql服务 注意：已经创建的数据库的设定不会发生变化，参数修改只对新建的数据库有效！ 已生成的库表字符集如何变更 修改数据库的字符集 ​ alter database 数据库名 character set 'utf8'; 修改数据表的字符集 ​ alter table 表名 convert to character set 'utf8';","categories":[],"tags":[{"name":"linux mysql","slug":"linux-mysql","permalink":"http://example.com/tags/linux-mysql/"}]},{"title":"linux软件包管理","slug":"linux软件包管理","date":"2021-05-09T07:45:25.000Z","updated":"2021-05-18T13:31:01.758Z","comments":true,"path":"2021/05/09/linux软件包管理/","link":"","permalink":"http://example.com/2021/05/09/linux%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/","excerpt":"RPM RPM概述 RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe 是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。 RPM包的名称格式 Apache-1.3.23-11.i386.rpm “apache” 软件名称 “1.3.23-11”软件的版本号，主版本和此版本 “i386”是软件所运行的硬件平台，Intel 32位微处理器的统称 “rpm”文件扩展名，代表RPM包","text":"RPM RPM概述 RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe 是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。 RPM包的名称格式 Apache-1.3.23-11.i386.rpm “apache” 软件名称 “1.3.23-11”软件的版本号，主版本和此版本 “i386”是软件所运行的硬件平台，Intel 32位微处理器的统称 “rpm”文件扩展名，代表RPM包 RPM查询命令（rpm -qa） 基本语法 rpm -qa （功能描述：查询所安装的所有rpm软件包） 经验技巧 由于软件包比较多，一般都会采取过滤。rpm -qa | grep rpm软件包 案例实操 查询firefox软件安装情况 12[root@hadoop100 ~]# rpm -qa | grep firefoxfirefox-68.10.0-1.el7.centos.x86_64 RPM卸载命令（rpm -e） 基本语法 （1）rpm -e RPM软件包 （2） rpm -e --nodeps 软件包 选项说明 选项 功能 -e 卸载软件包 --nodeps 卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。 案例实操 卸载firefox软件 1[root@hadoop100 ~]# rpm -e firefox RPM安装命令（rpm -ivh） 基本语法 rpm -ivh RPM包全名 选项说明 选项 功能 -i -i=install，安装 -v -v=verbose，显示详细信息 -h -h=hash，进度条 --nodeps --nodeps，不检测依赖进度 案例实操 安装firefox软件 1[root@hadoop101 Packages]# rpm -ivh firefox-45.0.1-1.el6.centos.x86_64.rpm YUM仓库配置 YUM概述 YUM（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装 YUM的常用命令 基本语法 yum [选项] [参数] 选项说明 选项 功能 -y 对所有提问都回答“yes” 参数说明 参数 功能 install 安装rpm软件包 update 更新rpm软件包 check-update 检查是否有可用的更新rpm软件包 remove 删除指定的rpm软件包 list 显示软件包信息 clean 清理yum过期的缓存 deplist 显示yum软件包的所有依赖关系 案例实操实操 采用yum方式安装firefox 1[root@hadoop100 ~]#yum -y install firefox.x86_64 修改网络YUM源 默认的系统YUM源，需要连接国外apache网站，网速比较慢，可以修改关联的网络YUM源为国内镜像的网站，比如网易163。 前期文件准备 （1）前提条件linux系统必须可以联网 （2）在Linux环境中访问该网络地址：http://mirrors.163.com/.help/centos.html ，在使用说明中点击CentOS7 -&gt; 再点击保存 （3）查看文件保存的位置 替换本地yum文件 （1）把下载的文件移动到/etc/yum.repos.d/目录 1[root@hadoop100 Downloads]# mv CentOS7-Base-163.repo /etc/yum.repos.d/ （2）进入到/etc/yum.repos.d/目录 （3）用CentOS7-Base-163.repo替换CentOS-Base.repo 1[root@hadoop100 yum.repos.d]# mv CentOS7-Base-163.repo CentOS-Base.repo 安装命令 12[root@hadoop100 yum.repos.d]# yum clean all[root@hadoop100 yum.repos.d]# yum makecache 测试 123[root@hadoop100 yum.repos.d]# yum list | grep firefoxfirefox.x86_64 78.10.0-1.el7.centos @updates firefox.i686 78.10.0-1.el7.centos updates","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"linux常用基本命令","slug":"linux常用基本命令","date":"2021-05-07T08:37:37.000Z","updated":"2021-05-09T07:36:54.801Z","comments":true,"path":"2021/05/07/linux常用基本命令/","link":"","permalink":"http://example.com/2021/05/07/linux%E5%B8%B8%E7%94%A8%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/","excerpt":"帮助命令 man 获得帮助信息 基本语法 1man [命令或配置文件] 显示说明 信息 功能 NAME 命令的名称和单行描述 SYNOPSIS 怎样使用命令 DESCRIPTION 命令功能的深入讨论 EXAMPLES 怎样使用命令的例子 SEE ALSO 相关主题（通常是手册页）","text":"帮助命令 man 获得帮助信息 基本语法 1man [命令或配置文件] 显示说明 信息 功能 NAME 命令的名称和单行描述 SYNOPSIS 怎样使用命令 DESCRIPTION 命令功能的深入讨论 EXAMPLES 怎样使用命令的例子 SEE ALSO 相关主题（通常是手册页） 案例实操 查看ls命令的帮助信息 1[root@hadoop100 ~]# man ls help 获得shell内置命令的帮助信息 基本语法 1help 命令 案例实操 查看cd命令的帮助信息 1[root@hadoop100 ~]# help cd 常用快捷键 常用快捷键 功能 ctrl + c 停止进程 ctrl + l reset ctrl + q 退出 文件目录类 pwd 显示当前工作目录的绝对路径 ls:list 列出目录内容 基本语法 1pwd 案例实操 显示当前工作目录的绝对路径 12[root@hadoop100 ~]# pwd/root ls 列出目录的内容 基本语法 1ls [选项] [目录或是文件] 选项说明 选项 功能 -a 全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用) -l 长数据串列出，包含文件的属性与权限等等数据；(常用) 显示说明 每行列出的信息依次是：文件类型与权限 链接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字 案例实操 查看当前目录的所有内容信息 1234567[root@hadoop100 ~]# ls -altotal 60dr-xr-x---. 15 root root 4096 May 7 15:45 .dr-xr-xr-x. 17 root root 224 Apr 29 17:23 ..-rw-------. 1 root root 1533 Apr 29 17:24 anaconda-ks.cfg-rw-------. 1 root root 1057 Apr 30 16:41 .bash_history-rw-r--r--. 1 root root 18 Dec 29 2013 .bash_logout cd 切换目录 cd:Change Directory切换路径 基本语法 1cd [参数] 参数说明 参数 功能 cd 绝对路径 切换路径 cd 相对路径 切换路径 cd ~ 回到自己的家目录 cd - 回到上一次所在目录 cd .. 回到当前目录的上一级目录 cd -P 跳转到实际物理路径，而非快捷方式路径 案例实操 使用绝对路径切换到root目录 1[root@hadoop101 ~]# cd /root/ 使用相对路径切换到“公共的”目录 12[root@hadoop101 ~]# cd Public/[root@hadoop100 Public]# 表示回到自己的家目录，亦即是 /root 这个目录 12[root@hadoop100 Public]# cd ~[root@hadoop100 ~]# cd- 回到上一次所在目录 123[root@hadoop100 ~]# cd -/root/Public[root@hadoop100 Public]# 表示回到当前目录的上一级目录，亦即是 “/root/Public”的上一级目录的意思 12[root@hadoop100 Public]# cd ..[root@hadoop100 ~]# mkdir 创建一个新的目录 mkdir:Make directory 建立目录 基本语法 1mkdir [选项] 要创建的目录 选项说明 选项 功能 -p 创建多层目录 案例实操 创建一个目录 12[root@hadoop100 ~]# mkdir test[root@hadoop100 ~]# mkdir test/test 创建一个多级目录 1[root@hadoop100 ~]# mkdir -p a/b/c rmdir 删除一个空的目录 rmdir:Remove directory 移动目录 基本语法 1rmdir 要删除的空目录 案例实操 删除一个空的文件夹 1[root@hadoop100 ~]# rmdir a/b/c test/test/ #删除掉c和第二级的test touch 创建空文件 基本语法 1touch 文件名称 案例实操 1[root@hadoop100 ~]# touch a.txt cp 复制文件或目录 基本语法 1cp [选项] source dest （功能描述：复制source文件到dest） 选项说明 选项 功能 -r 递归复制整个文件夹 参数说明 参数 功能 source 源文件 dest 目标文件 经验技巧 强制覆盖不提示的方法： 案例实操 复制文件 1[root@hadoop100 ~]# cp a.txt test/test 递归复制整个文件夹 1[root@hadoop100 ~]# cp -r test/test a/b/c rm 移除文件或目录 基本语法 1rm [选项] deleteFile （功能描述：递归删除目录中所有内容） 选项说明 选项 功能 -r 递归删除目录中所有内容 -f 强制执行删除操作，而不提示用于进行确认。 -v 显示指令的详细执行过程 案例实操 删除目录中的内容 1[root@hadoop100 ~]# rm a.txt 递归删除目录中所有内容 1[root@hadoop100 ~]# rm -rf a/ mv 移动文件与目录或重命名 基本语法 mv oldNameFile newNameFile （功能描述：重命名） mv /temp/movefile /targetFolder （功能描述：移动文件） 案例实操 重命名 1[root@hadoop100 ~]# mv a/b/c/a.txt a/b/c/a.xxx 移动文件 1[root@hadoop100 ~]# mv a/b/c/a.txt a/b/ cat 查看文件内容 查看文件内容，从第一行开始显示。 基本语法 1cat [选项] 要查看的文件 选项说明 选项 功能描述 -n 显示所有行的行号，包括空行。 经验技巧 一般查看比较小的文件，一屏幕能显示全的。 案例实操 查看文件内容并显示行号 1[root@hadoop100 ~]# cat -n a/b/a.txt more 文件内容分屏查看器 more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见操作说明。 基本语法 more 要查看的文件 操作说明 操作 功能说明 空格键 (space) 代表向下翻一页 Enter 代表向下翻『一行』 q 代表立刻离开 more ，不再显示该文件内容。 Ctrl+F 向下滚动一屏 Ctrl+B 返回上一屏 = 输出当前行的行号 :f 输出文件名和当前行的行号 案例实操 采用more查看文件 1[root@hadoop100 ~]# more anaconda-ks.cfg less 分屏显示文件内容 less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。 基本语法 less 要查看的文件 操作说明 操作 功能说明 空格键 向下翻动一页 [pagedown] 向下翻动一页 [pageup] 向上翻动一页 /字串 向下搜寻『字串』的功能；n：向下查找；N：向上查找； ?字串 向上搜寻『字串』的功能；n：向上查找；N：向下查找； q 离开 less 这个程序； 案例实操 采用less查看文件 1[root@hadoop100 ~]# less anaconda-ks.cfg echo echo输出内容到控制台 基本语法 1echo [选项] [输出内容] 选项： ​ -e： 支持反斜线控制的字符转换 控制字符 作用 \\ 输出 换行符 制表符，也就是Tab键 案例实操 123[root@hadoop100 ~]# echo -e &quot;hello\\nworld&quot;helloworld head 显示文件头部内容 head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容。 基本语法 head 文件 （功能描述：查看文件头10行内容） head -n 5 文件 （功能描述：查看文件头5行内容，5可以是任意行数） 选项说明 选项 功能 -n 指定显示头部内容的行数 案例实操 查看文件的头2行 1[root@hadoop100 ~]# head -n 8 anaconda-ks.cfg tail 输出文件尾部内容 tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。 基本语法 tail 文件 （功能描述：查看文件后10行内容） tail -n 5 文件 （功能描述：查看文件后5行内容，5可以是任意行数） tail -f 文件 （功能描述：实时追踪该文档的所有更新） 选项说明 选项 功能 -n 输出文件尾部n行内容 -f 显示文件最新追加的内容，监视文件变化 案例实操 查看文件后1行内容 1[root@hadoop100 ~]# tail -n 1 a/b/a.txt 实时追踪该档的所有更新 1[root@hadoop100 ~]# tail -f a/b/a.txt &gt; 覆盖 和 &gt;&gt; 追加 基本语法 ll &gt;文件 （功能描述：列表的内容写入文件a.txt中（覆盖写）） ll &gt;&gt;文件 （功能描述：列表的内容追加到文件aa.txt的末尾） cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2） echo “内容” &gt;&gt; 文件 案例实操 将ls查看信息写入到文件中 1[root@hadoop100 ~]# ls &gt; ls.txt 将ls查看信息追加到文件中 1[root@hadoop100 ~]# ls -a &gt;&gt; ls.txt 采用echo将hello单词追加到文件中 1[root@hadoop100 ~]# echo hello &gt;&gt; ls.txt ln 软链接 软链接也称为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。 基本语法 ln -s [原文件或目录] [软链接名] （功能描述：给原文件创建一个软链接） 经验技巧 删除软链接： rm -rf 软链接名，而不是rm -rf 软链接名/ 查询：通过ll就可以查看，列表属性第1位是l，尾部会有位置指向。 案例实操 创建软连接 1234[root@hadoop100 ~]# mv ls.txt a/b/[root@hadoop100 ~]# ln -s a/b/ls.txt test0[root@hadoop100 ~]# lllrwxrwxrwx. 1 root root 10 May 7 18:36 test0 -&gt; a/b/ls.txt 删除软连接 1[root@hadoop100 ~]# rm -rf test0 进入软连接实际物理路径 123[root@hadoop100 ~]# ln -s a/b/ c[root@hadoop100 ~]# cd -P c[root@hadoop100 b]# history 查看已经执行过历史命令 基本语法 1history （功能描述：查看已经执行过历史命令） 实操实例 查看已经执行过的历史命令 1[root@hadoop100 ~]# history 用户管理命令 useradd 添加新用户 基本语法 useradd 用户名 （功能描述：添加新用户） useradd -g 组名 用户名 （功能描述：添加新用户到某个组） 案例实操 添加一个用户 123[root@hadoop100 bin]# useradd zhangsan[root@hadoop100 bin]# ll /home/drwx------. 5 zhangsan zhangsan 107 May 7 20:22 zhangsan passwd 设置用户密码 基本语法 passwd 用户名 （功能描述：设置用户密码） 案例实操 设置用户的密码 1[root@hadoop100 bin]# passwd zhangsan id 查看用户是否存在 基本语法 id 用户名 案例实操 查看用户是否存在 12[root@hadoop100 bin]# id zhangsanuid=1001(zhangsan) gid=1001(zhangsan) groups=1001(zhangsan) cat /etc/passwd 查看创建了哪些用户 1[root@hadoop100 ~]# cat /etc/passwd su 切换用户 su: swith user 切换用户 基本语法 su 用户名称 （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量） su - 用户名称 （功能描述：切换到用户并获得该用户的环境变量及执行权限） 案例实操 切换用户 1234567[root@hadoop100 ~]# su zhangsan[zhangsan@hadoop100 root]$ echo $PATH/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin[root@hadoop100 ~]# su - zhangsan[zhangsan@hadoop100 ~]$ echo $PATH/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/zhangsan/.local/bin:/home/zhangsan/bin userdel 删除用户 基本语法 userdel 用户名 （功能描述：删除用户但保存用户主目录） userdel -r 用户名 （功能描述：用户和用户主目录，都删除） 选项说明 选项 功能 -r 删除用户的同时，删除与用户相关的所有文件。 案例实操 删除用户但保存用户主目录 123[root@hadoop100 ~]# userdel zhangsan[root@hadoop100 ~]# ll /home/drwx------. 5 1001 1001 128 May 7 20:42 zhangsan 删除用户和用户主目录，都删除 123456[root@hadoop100 ~]# useradd zhangsanuseradd: warning: the home directory already exists.Not copying any file from skel directory into it.[root@hadoop100 ~]# userdel -r zhangsan[root@hadoop100 ~]# ll /home/ who 查看登录用户信息 基本语法 whoami （功能描述：显示自身用户名称） who am i （功能描述：显示登录用户的用户名） 案例实操 显示自身用户名称 12[root@hadoop100 ~]# whoamiroot 显示登录用户的用户名 1234[root@hadoop100 ~]# su - curiophilLast login: Fri May 7 20:22:18 CST 2021 on pts/0[curiophil@hadoop100 ~]$ who am i root pts/0 2021-05-07 20:42 (192.168.1.3) sudo 设置普通用户具有root权限 添加zhangsan用户，并对其设置密码 修改配置文件 1[root@hadoop100 ~]#vi /etc/sudoers 修改 /etc/sudoers 文件，找到下面一行(99行)，在root下面添加一行，如下所示： 123##Allow root to run any commands anywhereroot ALL&#x3D;(ALL) ALLzhangsan ALL&#x3D;(ALL) ALL 或者配置成采用sudo命令时，不需要输入密码 123## Allow root to run any commands anywhereroot ALL&#x3D;(ALL) ALLzhangsan ALL&#x3D;(ALL) NOPASSWD:ALL 修改完毕，现在可以用zhangsan帐号登录，然后用命令 sudo ，即可获得root权限进行操作。 案例实操 用普通用户在/opt目录下创建一个文件夹 12[zhangsan@hadoop100 opt]$ sudo mkdir module[root@hadoop100 opt]# chown zhangsan:zhangsan module/ usermod 修改用户 基本语法 usermod -g 用户组 用户名 选项说明 选项 功能 -g 修改用户的初始登录组，给定的组必须存在 案例实操 将用户加入到用户组 1[root@hadoop100 opt]#usermod -g root zhangsan 用户组管理命令 每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同， 如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。 用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。 groupadd 新增组 1[root@hadoop100 ~]#groupadd lisi groupdel 删除组 1[root@hadoop100 ~]# groupdel lisi groupmod 修改组 基本语法 groupmod -n 新组名 老组名 选项说明 选项 功能描述 -n 指定工作组的新组名 案例实操 修改lisi组名称为lisi1 12[root@hadoop100 ~]#groupadd lisi[root@hadoop100 ~]# groupmod -n lisi1 lisi cat /etc/group 查看创建了哪些组 1[root@hadoop100 ~]# cat /etc/group 文件权限类 文件属性 Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。在Linux中我们可以使用ll或者ls -l命令来显示一个文件的属性以及文件所属的用户和组。 从左到右的10个字符表示，如图所示。 如果没有权限，就会出现减号[ - ]而已。从左至右用0-9这些数字来表示: 0首位表示类型 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等 - 代表文件 d 代表目录 l 链接文档(link file)； 第1-3位确定属主（该文件的所有者）拥有该文件的权限。---User 第4-6位确定属组（所有者的同组用户）拥有该文件的权限，---Group 第7-9位确定其他用户拥有该文件的权限 ---Other rxw作用文件和目录的不同解释 作用到文件 [ r ]代表可读(read): 可以读取，查看 [ w ]代表可写(write): 可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件. [ x ]代表可执行(execute):可以被系统执行 作用到目录 [ r ]代表可读(read): 可以读取，ls查看目录内容 [ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录 [ x ]代表可执行(execute):可以进入该目录 案例实操 123[root@hadoop100 ~]# lltotal 8-rw-------. 1 root root 1533 Apr 29 17:24 anaconda-ks.cfg 如果查看到是文件：链接数指的是硬链接个数。创建硬链接方法 ln [原文件] [目标文件] 1[root@hadoop101 ~]# ln a&#x2F;b&#x2F;a.txt b.txt 如果查看的是文件夹：链接数指的是子文件夹个数。 chmod 改变权限 基本语法 第一种方式变更权限 ​ chmod [{ugoa}{+-=}{rwx}] 文件或目录 第二种方式变更权限 ​ chmod [mode=421 ] [文件或目录] 经验技巧 u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和) r=4 w=2 x=1 rwx=4+2+1=7 案例实操 修改文件使其所属主用户具有执行权限 12[root@hadoop100 ~]# touch a.txt[root@hadoop100 ~]# chmod u+x a.txt 修改文件使其所属组用户具有执行权限 1[root@hadoop100 ~]# chmod g+x a.txt 修改文件所属主用户执行权限,并使其他用户具有执行权限 1[root@hadoop100 ~]# chmod u-x,o+x a.txt 采用数字的方式，设置文件所有者、所属组、其他用户都具有可读可写可执行权限。 1[root@hadoop100 ~]# chmod 777 a.txt 修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读可写可执行权限。 1[root@hadoop100 ~]# chmod -R 777 a/ chown 改变所有者 基本语法 chown [选项] [最终用户] [文件或目录] （功能描述：改变文件或者目录的所有者） 选项说明 选项 功能 -R 递归操作 案例实操 修改文件所有者 12[root@hadoop100 ~]# chown curiophil a.txt -rwxr-xr--. 1 curiophil root 0 May 7 21:24 a.txt 递归改变文件所有者和所有组 12[root@hadoop100 ~]# chown -R curiophil:curiophil a/drwxr-xr-x. 3 curiophil curiophil 15 May 7 21:32 a chgrp 改变所属组 基本语法 chgrp [最终用户组] [文件或目录] （功能描述：改变文件或者目录的所属组） 案例实操 修改文件的所属组 123[root@hadoop100 ~]# chgrp curiophil a.txt [root@hadoop100 ~]# ll-rwxr-xr--. 1 curiophil curiophil 0 May 7 21:35 a.txt 搜索查找类 find 查找文件或者目录 find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。 基本语法 find [搜索范围] [选项] 选项说明 选项 功能 -name 按照指定的文件名查找模式查找文件 -user 查找属于指定用户名所有文件 -size 按照指定的文件大小查找文件。 案例实操 按文件名：根据名称查找/目录下的filename.txt文件。 1[root@hadoop100 ~]# find -name &quot;*.txt&quot; 按拥有者：查找/opt目录下，用户名称为-user的文件 1[root@hadoop100 ~]# find /opt/ -user root 按文件大小：在/home目录下查找大于200m的文件（+n 大于 -n小于 n等于） 1[root@hadoop100 ~]# find /home/ -size +204800 grep 过滤查找及“|”管道符 管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理 基本语法 grep 选项 查找内容 源文件 选项说明 -n 显示匹配行及行号 案例实操 查找某文件在第几行 1[root@hadoop100 ~]# ls | grep -n Doc which 查找命令 查找命令在那个目录下 基本语法 which 命令 案例实操 123[root@hadoop100 ~]# which llalias ll=&#x27;ls -l --color=auto&#x27; /usr/bin/ls 压缩和解压类 gzip/gunzip 压缩 基本语法 gzip 文件 （功能描述：压缩文件，只能将文件压缩为*.gz文件） gunzip 文件.gz （功能描述：解压缩文件命令） 经验技巧 （1）只能压缩文件不能压缩目录 （2）不保留原来的文件 案例实操 gzip压缩 1[root@hadoop100 ~]# gzip a.txt gunzip解压缩文件 1[root@hadoop100 ~]# gunzip a.txt.gz zip/unzip 压缩 基本语法 zip [选项] XXX.zip 将要压缩的内容 （功能描述：压缩文件和目录的命令） unzip [选项] XXX.zip （功能描述：解压缩文件） 选项说明 zip 选项 功能 -r 压缩目录 unzip 选项 功能 -d 指定解压后文件的存放目录 经验技巧 zip 压缩命令在window/linux都通用，可以压缩目录且保留源文件。 案例实操 压缩 a.txt 和b.txt，压缩后的名称为mypackage.zip 123[root@hadoop100 ~]# zip mypackage.zip a.txt b.txt adding: a.txt (stored 0%) adding: b.txt (stored 0%) 解压 mypackage.zip 1[root@hadoop100 ~]# unzip mypackage.zip 解压mypackage.zip到指定目录-d 1234[root@hadoop100 ~]# unzip -d mypackage mypackage.zip Archive: mypackage.zip extracting: mypackage/a.txt extracting: mypackage/b.txt tar 打包 基本语法 tar [选项] XXX.tar.gz 将要打包进去的内容 （功能描述：打包目录，压缩后的文件格式.tar.gz） 选项说明 选项 功能 -z 打包同时压缩 -c 产生.tar打包文件 -v 显示详细信息 -f 指定压缩后的文件名 -x 解包.tar文件 案例实操 压缩多个文件 1[root@hadoop100 ~]# tar -zcvf mypackage.tar.gz a.txt b.txt 压缩目录 1[root@hadoop100 ~]# tar -zcvf a.tar.gz a/ 解压到当前目录 1[root@hadoop100 ~]# tar -zxvf a.tar.gz 解压到指定目录 12[root@hadoop100 ~]# mkdir a[root@hadoop100 ~]# tar -zxvf mypackage.tar.gz -C a/ 磁盘分区类 df 查看磁盘空间使用情况 df: disk free 空余硬盘 基本语法 df 选项 （功能描述：列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况） 选项说明 -h 以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示 案例实操 查看磁盘使用情况 12345678910[root@hadoop100 a]# df -hFilesystem Size Used Avail Use% Mounted ondevtmpfs 974M 0 974M 0% /devtmpfs 991M 0 991M 0% /dev/shmtmpfs 991M 11M 980M 2% /runtmpfs 991M 0 991M 0% /sys/fs/cgroup/dev/mapper/centos-root 47G 4.9G 43G 11% //dev/sda1 1014M 172M 843M 17% /boottmpfs 199M 12K 199M 1% /run/user/42tmpfs 199M 0 199M 0% /run/user/0 fdisk 查看分区 基本语法 fdisk -l （功能描述：查看磁盘分区详情） 选项说明 -l 显示所有硬盘的分区列表 经验技巧 该命令必须在root用户下才能使用 功能说明 Device：分区序列 Boot：引导 Start：从X磁柱开始 End：到Y磁柱结束 Blocks：容量 Id：分区类型ID System：分区类型 案例实操 查看系统分区情况 1234567891011121314151617181920212223[root@hadoop100 a]# fdisk -lDisk /dev/sda: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000a0d1e Device Boot Start End Blocks Id System/dev/sda1 * 2048 2099199 1048576 83 Linux/dev/sda2 2099200 104857599 51379200 8e Linux LVMDisk /dev/mapper/centos-root: 50.5 GB, 50457477120 bytes, 98549760 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytesDisk /dev/mapper/centos-swap: 2147 MB, 2147483648 bytes, 4194304 sectorsUnits = sectors of 1 * 512 = 512 bytesSector size (logical/physical): 512 bytes / 512 bytesI/O size (minimum/optimal): 512 bytes / 512 bytes mount/umount 挂载/卸载 对于Linux用户来讲，不论有几个分区，分别分给哪一个目录使用，它总归就是一个根目录、一个独立且唯一的文件结构。 Linux中每个分区都是用来组成整个文件系统的一部分，它在用一种叫做“挂载”的处理方法，它整个文件系统中包含了一整套的文件和目录，并将一个分区和一个目录联系起来，要载入的那个分区将使它的存储空间在这个目录下获得。 基本语法 mount [-t vfstype] [-o options] device dir （功能描述：挂载设备） umount 设备文件名或挂载点 （功能描述：卸载设备） 参数说明 参数 功能 -t vfstype 指定文件系统的类型，通常不必指定。mount 会自动选择正确的类型。常用类型有：光盘或光盘镜像：iso9660，DOS fat16文件系统：msdos，Windows 9x fat32文件系统：vfat， Windows NT ntfs文件系统：ntfs， Mount Windows文件网络共享：smbfs， UNIX(LINUX) 文件网络共享：nfs -o options 主要用来描述设备或档案的挂接方式。常用的参数有：loop：用来把一个文件当成硬盘分区挂接上系统， ro：采用只读方式挂接设备， rw：采用读写方式挂接设备， iocharset：指定访问文件系统所用字符集 device 要挂接(mount)的设备 dir 设备在系统上的挂接点(mount point) 案例实操 挂载光盘镜像文件 1[root@hadoop100 mnt]# mount /dev/cdrom /mnt/cd/ 卸载光盘镜像文件 123[root@hadoop100 mnt]# umount /mnt/cd[root@hadoop100 mnt]# ll cd total 0 设置开机自动挂载 1234[root@hadoop100 mnt]# vim /etc/fstab# 尾部加一行/dev/cdrom /mnt/cd 进程线程类 进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。 ps 查看当前系统进程状态 ps:process status 进程状态 基本语法 ps -aux | grep xxx （功能描述：查看系统中所有进程） ps -ef | grep xxx （功能描述：可以查看子父进程之间的关系） 选项说明 选项 功能 -a 选择所有进程 -u 显示所有用户的所有进程 -x 显示没有终端的进程 功能说明 （1）ps -aux显示信息说明 USER：该进程是由哪个用户产生的 PID：进程的ID号 %CPU：该进程占用CPU资源的百分比，占用越高，进程越耗费资源； %MEM：该进程占用物理内存的百分比，占用越高，进程越耗费资源； VSZ：该进程占用虚拟内存的大小，单位KB； RSS：该进程占用实际物理内存的大小，单位KB； TTY：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，tty7是图形终端。pts/0-255代表虚拟终端。 STAT：进程状态。常见的状态有：R：运行、S：睡眠、T：停止状态、s：包含子进程、+：位于后台 START：该进程的启动时间 TIME：该进程占用CPU的运算时间，注意不是系统时间 COMMAND：产生此进程的命令名 （2）ps -ef显示信息说明 UID：用户ID PID：进程ID PPID：父进程ID C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高 STIME：进程启动的时间 TTY：完整的终端名称 TIME：CPU时间 CMD：启动进程所用的命令和参数 经验技巧 如果想查看进程的CPU占用率和内存占用率，可以使用aux; 如果想查看进程的父进程ID可以使用ef; 案例实操 12345678910[root@hadoop100 ~]# ps -auxUSER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMANDroot 1 0.3 0.3 193816 6372 ? Ss 12:00 0:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22root 2 0.0 0.0 0 0 ? S 12:00 0:00 [kthreadd]root 3 0.0 0.0 0 0 ? S 12:00 0:00 [kworker/0:0]root 4 0.0 0.0 0 0 ? S&lt; 12:00 0:00 [kworker/0:0H]root 6 0.0 0.0 0 0 ? S 12:00 0:00 [ksoftirqd/0]root 7 0.6 0.0 0 0 ? S 12:00 0:04 [migration/0]root 8 0.0 0.0 0 0 ? S 12:00 0:00 [rcu_bh]root 9 0.0 0.0 0 0 ? S 12:00 0:00 [rcu_sched] 123456789101112[root@hadoop100 ~]# ps -efUID PID PPID C STIME TTY TIME CMDroot 1 0 0 12:00 ? 00:00:02 /usr/lib/systemd/systemd --switched-root --system --deserialize 22root 2 0 0 12:00 ? 00:00:00 [kthreadd]root 3 2 0 12:00 ? 00:00:00 [kworker/0:0]root 4 2 0 12:00 ? 00:00:00 [kworker/0:0H]root 6 2 0 12:00 ? 00:00:00 [ksoftirqd/0]root 7 2 0 12:00 ? 00:00:04 [migration/0]root 8 2 0 12:00 ? 00:00:00 [rcu_bh]root 9 2 0 12:00 ? 00:00:00 [rcu_sched]root 10 2 0 12:00 ? 00:00:00 [lru-add-drain]root 11 2 0 12:00 ? 00:00:00 [watchdog/0] kill 终止进程 基本语法 kill [选项] 进程号 （功能描述：通过进程号杀死进程） killall 进程名称 （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用） 选项说明 -9 表示强迫进程立即停止 案例实操 杀死浏览器进程 1[root@hadoop100 ~]# kill -9 3077 通过进程名称杀死进程 1[root@hadoop100 ~]# killall firefox pstree 查看进程树 基本语法 pstree [选项] 选项说明 选项 功能 -p 显示进程的PID -u 显示进程的所属用户 案例实操 显示进程pid 1[root@hadoop100 ~]# pstree -p 显示进程所属用户 1[root@hadoop100 ~]# pstree -u top 查看系统健康状态 基本命令 top [选项] 选项说明 选项 功能 -d 秒数 指定top命令每隔几秒更新。默认是3秒在top命令的交互模式当中可以执行的命令： -i 使top不显示任何闲置或者僵死进程 -p 通过指定监控进程ID来仅仅监控某个进程的状态。 操作说明 操作 功能 P 以CPU使用率排序，默认就是此项 M 以内存的使用率排序 N 以PID排序 q 退出top 查询结果字段解释 第一行信息为任务队列信息 内容 说明 12:26:46 系统当前时间 up 1 day, 13:32 系统的运行时间，本机已经运行1天 13小时32分钟 2 users 当前登录了两个用户 load average: 0.00, 0.00, 0.00 系统在之前1分钟，5分钟，15分钟的平均负载。一般认为小于1时，负载较小。如果大于1，系统已经超出负荷。 第二行为进程信息 Tasks: 95 total 系统中的进程总数 1 running 正在运行的进程数 94 sleeping 睡眠的进程 0 stopped 正在停止的进程 0 zombie 僵尸进程。如果不是0，需要手工检查僵尸进程 第三行为CPU信息 Cpu(s): 0.1%us 用户模式占用的CPU百分比 0.1%sy 系统模式占用的CPU百分比 0.0%ni 改变过优先级的用户进程占用的CPU百分比 99.7%id 空闲CPU的CPU百分比 0.1%wa 等待输入/输出的进程的占用CPU百分比 0.0%hi 硬中断请求服务占用的CPU百分比 0.1%si 软中断请求服务占用的CPU百分比 0.0%st st（Steal time）虚拟时间百分比。就是当有虚拟机时，虚拟CPU等待实际CPU的时间百分比。 第四行为物理内存信息 Mem: 625344k total 物理内存的总量，单位KB 571504k used 已经使用的物理内存数量 53840k free 空闲的物理内存数量，我们使用的是虚拟机，总共只分配了628MB内存，所以只有53MB的空闲内存了 65800k buffers 作为缓冲的内存数量 第五行为交换分区（swap）信息 Swap: 524280k total 交换分区（虚拟内存）的总大小 0k used 已经使用的交互分区的大小 524280k free 空闲交换分区的大小 409280k cached 作为缓存的交互分区的大小 案例实操 123[root@hadoop100 ~]# top -d 1[root@hadoop100 ~]# top -i[root@hadoop100 ~]# top -p 3306 执行上述命令后，可以按P、M、N对查询出的进程结果进行排序。 netstat 显示网络统计信息和端口占用情况 基本语法 netstat -anp |grep 进程号 （功能描述：查看该进程网络信息） netstat -nlp | grep 端口号 （功能描述：查看网络端口号占用情况） 选项说明 选项 功能 -n 拒绝显示别名，能显示数字的全部转化成数字 -l 仅列出有在listen（监听）的服务状态 -p 表示显示哪个进程在调用 案例实操 通过进程号查看该进程的网络信息 1[root@hadoop100 ~]# netstat -anp | grep 4120 查看某端口号是否被占用 1[root@hadoop100 ~]# netstat -nlp | grep 4120 crond 系统定时任务 crond 服务管理 重新启动crond服务 1[root@hadoop100 ~]# service crond restart crontab 定时任务设置 基本语法 crontab [选项] 选项说明 选项 功能 -e 编辑crontab定时任务 -l 查询crontab任务 -r 删除当前用户所有的crontab任务 参数说明 1[root@hadoop100 ~]# crontab -e （1）进入crontab编辑界面。会打开vim编辑你的工作。 * * * * * 执行的任务 项目 含义 范围 第一个“*” 一小时当中的第几分钟 0-59 第二个“*” 一天当中的第几小时 0-23 第三个“*” 一个月当中的第几天 1-31 第四个“*” 一年当中的第几月 1-12 第五个“*” 一周当中的星期几 0-7（0和7都代表星期日） （2）特殊符号 特殊符号 含义 * 代表任何时间。比如第一个“*”就代表一小时中每分钟都执行一次的意思。 ， 代表不连续的时间。比如“0 8,12,16 * * * 命令”，就代表在每天的8点0分，12点0分，16点0分都执行一次命令 - 代表连续的时间范围。比如“0 5 * * 1-6命令”，代表在周一到周六的凌晨5点0分执行命令 */n 代表每隔多久执行一次。比如“/10 * * * 命令”，代表每隔10分钟就执行一遍命令 （3）特定时间执行命令 时间 含义 45 22 * * * 命令 在22点45分执行命令 0 17 * * 1 命令 每周1 的17点0分执行命令 0 5 1,15 * * 命令 每月1号和15号的凌晨5点0分执行命令 40 4 * * 1-5 命令 每周一到周五的凌晨4点40分执行命令 /10 4 * * 命令 每天的凌晨4点，每隔10分钟执行一次命令 0 0 1,15 * 1 命令 每月1号和15号，每周1的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。非常容易让管理员混乱。 案例实操 每隔1分钟，向/root/a.txt文件中添加一个“hello world!” 1*&#x2F;1 * * * * &#x2F;bin&#x2F;echo ”hello world!” &gt;&gt; &#x2F;root&#x2F;a.txt","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"linux服务管理(centos7)","slug":"linux服务管理","date":"2021-04-29T14:39:41.000Z","updated":"2021-05-07T07:37:52.575Z","comments":true,"path":"2021/04/29/linux服务管理/","link":"","permalink":"http://example.com/2021/04/29/linux%E6%9C%8D%E5%8A%A1%E7%AE%A1%E7%90%86/","excerpt":"基本语法（centos7） 临时后台服务管理 开启服务 1systemctl start 服务名 关闭服务 1systemctl stop 服务名 重新启动服务 1systemctl restart 服务名","text":"基本语法（centos7） 临时后台服务管理 开启服务 1systemctl start 服务名 关闭服务 1systemctl stop 服务名 重新启动服务 1systemctl restart 服务名 查看服务状态 1systemctl status 服务名 查看正在运行的服务 1systemctl --type service 设置后台服务的自启配置 查看所有服务器自启配置 1systemctl list-unit-files 关掉指定服务的自动启动 1systemctl disable 服务名 开启指定服务的自动启动 1systemctl enable 服务名 查看服务开机启动状态 1systemctl is-enabled","categories":[],"tags":[{"name":"linux centos7","slug":"linux-centos7","permalink":"http://example.com/tags/linux-centos7/"}]},{"title":"Linux目录结构","slug":"Linux目录结构","date":"2021-04-29T10:25:15.000Z","updated":"2021-04-29T10:36:39.442Z","comments":true,"path":"2021/04/29/Linux目录结构/","link":"","permalink":"http://example.com/2021/04/29/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/","excerpt":"/bin (/usr/bin 、 /usr/local/bin) 是Binary的缩写, 这个目录存放着最经常使用的命令 /sbin (/usr/sbin 、 /usr/local/sbin) s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序 /home 存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的 /root 该目录为系统管理员，也称作超级权限者的用户主目录 /lib 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。","text":"/bin (/usr/bin 、 /usr/local/bin) 是Binary的缩写, 这个目录存放着最经常使用的命令 /sbin (/usr/sbin 、 /usr/local/sbin) s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序 /home 存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的 /root 该目录为系统管理员，也称作超级权限者的用户主目录 /lib 系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 /lost+found 这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。 /etc 所有的系统管理所需要的配置文件和子目录 /usr 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录 /boot 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，自己的安装别放这里 /proc 这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息 /srv service缩写，该目录存放一些服务启动之后需要提取的数据 /sys 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs /tmp 这个目录是用来存放一些临时文件的 /dev 类似于windows的设备管理器，把所有的硬件用文件的形式存储 /media linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下 /mnt 系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在/mnt/上，然后进入该目录就可以查看里的内容了 /opt 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。 /usr/local 这是另一个给主机额外安装软件所摆放的目录。一般是通过编译源码方式安装的程序 /var 这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件 /selinux SELinux是一种安全子系统,它能控制程序只能访问特定文件。","categories":[],"tags":[{"name":"linux centos7","slug":"linux-centos7","permalink":"http://example.com/tags/linux-centos7/"}]},{"title":"JupyterNotebook中使用conda虚拟环境","slug":"JupyterNotebook中使用conda虚拟环境","date":"2021-03-21T05:24:15.000Z","updated":"2021-03-21T05:29:02.025Z","comments":true,"path":"2021/03/21/JupyterNotebook中使用conda虚拟环境/","link":"","permalink":"http://example.com/2021/03/21/JupyterNotebook%E4%B8%AD%E4%BD%BF%E7%94%A8conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/","excerpt":"","text":"root环境安装nb_conda 1conda install nb_conda 虚拟环境安装ipykernel 1conda install ipykernel 参考链接 Anaconda 和 Jupyter notebook","categories":[],"tags":[{"name":"python环境","slug":"python环境","permalink":"http://example.com/tags/python%E7%8E%AF%E5%A2%83/"}]},{"title":"GA,SA,GRNN","slug":"GA-SA-GRNN","date":"2021-03-20T06:53:38.000Z","updated":"2021-03-20T07:01:09.710Z","comments":true,"path":"2021/03/20/GA-SA-GRNN/","link":"","permalink":"http://example.com/2021/03/20/GA-SA-GRNN/","excerpt":"","text":"参考链接 模拟退火算法 遗传算法 广义回归神经网路","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"重装系统","slug":"重装系统","date":"2021-03-06T14:17:29.000Z","updated":"2021-03-06T14:29:04.451Z","comments":true,"path":"2021/03/06/重装系统/","link":"","permalink":"http://example.com/2021/03/06/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"参考链接 手把手教你如何重装win10系统，自己动手安装系统其实很简单 win10 激活软件 链接：https://pan.baidu.com/s/1ptVXNrSte5A3-Lt1EjhbaA 提取码：pebm","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"http://example.com/tags/%E7%B3%BB%E7%BB%9F/"}]},{"title":"latex的常用数学符号","slug":"latex数学符号","date":"2021-03-02T12:51:04.000Z","updated":"2021-03-02T14:03:25.725Z","comments":true,"path":"2021/03/02/latex数学符号/","link":"","permalink":"http://example.com/2021/03/02/latex%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"参考链接 Latex所有常用数学符号整理","categories":[],"tags":[{"name":"latex","slug":"latex","permalink":"http://example.com/tags/latex/"}]},{"title":"next主题使用Latex公式","slug":"next主题使用公式","date":"2021-03-01T13:06:22.000Z","updated":"2021-03-20T07:01:42.190Z","comments":true,"path":"2021/03/01/next主题使用公式/","link":"","permalink":"http://example.com/2021/03/01/next%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%8F/","excerpt":"","text":"Install Dependencies 123# 需要先卸载默认的渲染引擎npm un hexo-renderer-marked --savenpm i hexo-renderer-pandoc --save Configure next文件夹下_config.yml这两个地方默认为False，更改为True 1234mathjax: enable: true # See: https:&#x2F;&#x2F;mhchem.github.io&#x2F;MathJax-mhchem&#x2F; mhchem: true 使用 在每个md文件的头部加上mathjax: true即可 测试公式 \\(\\sigma(x)=\\frac{1}{1+e^{-x}}\\) 参考链接 Hexo+Next: 使用Latex公式","categories":[],"tags":[{"name":"next主题 Latex","slug":"next主题-Latex","permalink":"http://example.com/tags/next%E4%B8%BB%E9%A2%98-Latex/"}]}],"categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"http://example.com/tags/shell/"},{"name":"linux mysql","slug":"linux-mysql","permalink":"http://example.com/tags/linux-mysql/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"linux centos7","slug":"linux-centos7","permalink":"http://example.com/tags/linux-centos7/"},{"name":"python环境","slug":"python环境","permalink":"http://example.com/tags/python%E7%8E%AF%E5%A2%83/"},{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"系统","slug":"系统","permalink":"http://example.com/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"latex","slug":"latex","permalink":"http://example.com/tags/latex/"},{"name":"next主题 Latex","slug":"next主题-Latex","permalink":"http://example.com/tags/next%E4%B8%BB%E9%A2%98-Latex/"}]}